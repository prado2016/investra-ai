name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '20'

jobs:
  # Validate release
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run full test suite
        run: npm run test:all
        
      - name: Build production
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Validate build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build output directory not found"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Main index.html not found in build"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"

  # Create release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      upload-url: ${{ steps.create-release.outputs.upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get release version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD 2>/dev/null || git log --pretty=format:"- %s" --max-count=10)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Release ${{ steps.get-version.outputs.version }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.changelog }}
            
            ## Assets
            - Production build artifacts
            - Coverage reports
            
            ## Deployment
            This release has been automatically built and tested.
          draft: false
          prerelease: false

  # Build and upload assets
  build-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build production
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Create release archive
        run: |
          tar -czf investra-ai-build.tar.gz dist/
          zip -r investra-ai-build.zip dist/
          tar -czf coverage-report.tar.gz coverage/
          
      - name: Upload tar.gz build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./investra-ai-build.tar.gz
          asset_name: investra-ai-build.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload zip build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./investra-ai-build.zip
          asset_name: investra-ai-build.zip
          asset_content_type: application/zip
          
      - name: Upload coverage report
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload-url }}
          asset_path: ./coverage-report.tar.gz
          asset_name: coverage-report.tar.gz
          asset_content_type: application/gzip

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-assets]
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Release: ${{ needs.create-release.outputs.release-id }}"
          # Add your production deployment commands here
          
      - name: Post-deployment verification
        run: |
          echo "üîç Running production health checks..."
          # Add production health check commands here
          
      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment completed successfully!"
