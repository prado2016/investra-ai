name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v1

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Type checking
        run: npm run type-check

  # Job 2: Unit & Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-suite: [unit, integration, e2e]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        if: matrix.test-suite == 'unit'
        run: npm run test:run
        
      - name: Run integration tests
        if: matrix.test-suite == 'integration'
        run: npm run test:integration
        
      - name: Install Playwright browsers
        if: matrix.test-suite == 'e2e'
        run: npx playwright install --with-deps
        
      - name: Run E2E tests
        if: matrix.test-suite == 'e2e'
        run: npm run test:e2e
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Job 3: Coverage Analysis
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Coverage Quality Gate
        run: |
          # Extract coverage percentages from coverage report
          COVERAGE=$(node -e "
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-final.json', 'utf8'));
              const totals = coverage.total;
              const statements = totals.statements.pct;
              const branches = totals.branches.pct;
              const functions = totals.functions.pct;
              const lines = totals.lines.pct;
              
              console.log('statements:' + statements);
              console.log('branches:' + branches);
              console.log('functions:' + functions);
              console.log('lines:' + lines);
              
              const threshold = 70;
              if (statements < threshold || branches < threshold || functions < threshold || lines < threshold) {
                console.log('FAIL: Coverage below ' + threshold + '% threshold');
                process.exit(1);
              } else {
                console.log('PASS: Coverage meets ' + threshold + '% threshold');
              }
            } catch (error) {
              console.log('WARNING: Could not parse coverage report');
              console.log(error.message);
            }
          ")
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
          retention-days: 30
          
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-final.json', 'utf8'));
              const totals = coverage.total;
              
              const comment = `## üìä Coverage Report
              
              | Metric | Coverage | Threshold |
              |--------|----------|-----------|
              | Statements | ${totals.statements.pct}% | 70% |
              | Branches | ${totals.branches.pct}% | 70% |
              | Functions | ${totals.functions.pct}% | 70% |
              | Lines | ${totals.lines.pct}% | 70% |
              
              **Coverage Summary:** ${totals.lines.pct >= 70 ? '‚úÖ PASSING' : '‚ùå FAILING'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not post coverage comment:', error.message);
            }

  # Job 4: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # Job 5: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, coverage]
    
    strategy:
      matrix:
        environment: [development, staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for development
        if: matrix.environment == 'development'
        run: npm run build
        
      - name: Build for staging
        if: matrix.environment == 'staging'
        run: npm run build:staging
        
      - name: Build for production
        if: matrix.environment == 'production'
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: dist/
          retention-days: 14

  # Job 6: Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: dist/
          
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Build artifacts ready for deployment"
          # Add your deployment commands here
          # Example: rsync, scp, or cloud deployment CLI commands
          
      - name: Health check
        run: |
          echo "üîç Running health checks..."
          # Add health check commands here
          # Example: curl staging endpoint, run smoke tests
          
      - name: Notify deployment success
        run: |
          echo "‚úÖ Deployment to staging completed successfully!"

  # Job 7: Performance Testing (optional)
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: dist/
          
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Run Lighthouse CI
        run: |
          lhci autorun || echo "Lighthouse CI completed with warnings"
          
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7
