name: Deploy Email Server (Development)

on:
  push:
    branches: [ develop, development/*, feature/*, bugfix/*, hotfix/* ]
    paths:
      - 'email-server/**'
      - '.github/workflows/deploy-email-server-dev.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'email-server/**'
      - '.github/workflows/deploy-email-server-dev.yml'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'
        type: string
      vm_environment:
        description: 'VM Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - testing

env:
  EMAIL_DOMAIN: dev.investra.com
  EMAIL_HOSTNAME: mail-dev.investra.com
  EMAIL_USER: transactions-dev@investra.com

jobs:
  deploy-dev-email-server:
    name: Deploy Development Email Server
    runs-on: self-hosted  # Use self-hosted runner to reach private VM
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch || github.ref }}

    - name: Display deployment info
      run: |
        echo "üöÄ Development Email Server Deployment"
        echo "======================================"
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: development"
        echo "Email Domain: ${{ env.EMAIL_DOMAIN }}"
        echo "Email User: ${{ env.EMAIL_USER }}"
        echo "Target VM: Development VM"

    - name: Verify Podman on VM
      run: |
        echo "Checking Podman installation..."
        podman --version

    - name: Prepare email server directory
      run: |
        echo "Creating email server directory structure..."
        mkdir -p ~/investra-email-server-dev
        cd ~/investra-email-server-dev
        mkdir -p data/{mail-data,mail-state,mail-logs,config}
        echo "Directory structure created"

    - name: Stop existing containers
      run: |
        echo "Stopping any existing email server containers..."
        podman stop investra-mailserver-dev 2>/dev/null || echo "No existing container to stop"
        podman rm investra-mailserver-dev 2>/dev/null || echo "No existing container to remove"

    - name: Pull email server image
      run: |
        echo "Pulling latest email server image..."
        podman pull ghcr.io/docker-mailserver/docker-mailserver:latest

    - name: Start email server container
      run: |
        echo "Starting email server container..."
        cd ~/investra-email-server-dev
        
        podman run -d \
          --name investra-mailserver-dev \
          -p 25:25 \
          -p 587:587 \
          -p 993:993 \
          -p 143:143 \
          -v ./data/mail-data:/var/mail:Z \
          -v ./data/mail-state:/var/mail-state:Z \
          -v ./data/mail-logs:/var/log/mail:Z \
          -v ./data/config:/tmp/docker-mailserver:Z \
          -e SSL_TYPE=self-signed \
          -e LOG_LEVEL=debug \
          -e DMS_DEBUG=1 \
          ghcr.io/docker-mailserver/docker-mailserver:latest
        
        echo "Container start command executed"

    - name: Wait and check container status
      run: |
        echo "Waiting 20 seconds for container to initialize..."
        sleep 20
        
        echo "Checking container status:"
        podman ps --filter "name=investra-mailserver-dev"
        
        echo "Checking container logs:"
        podman logs investra-mailserver-dev --tail=10 || echo "Could not get logs"

    - name: Check email ports
      run: |
        echo "Checking if email ports are listening:"
        for port in 25 587 993; do
          if ss -tlnp | grep ":$port "; then
            echo "‚úÖ Port $port is listening"
          else
            echo "‚ùå Port $port is not listening"
          fi
        done

    - name: Display deployment summary
      run: |
        echo "============================================"
        echo "üìß DEVELOPMENT EMAIL SERVER DEPLOYED"
        echo "============================================"
        echo ""
        echo "üåê Development Server Details:"
        echo "   Email Server: ${{ env.EMAIL_HOSTNAME }}"
        echo "   IP Address: ${{ secrets.RHEL_HOST }}"
        echo "   Email Account: ${{ env.EMAIL_USER }}"
        echo "   Environment: Development"
        echo ""
        echo "üìß Development Connection Settings:"
        echo "   IMAP: ${{ secrets.RHEL_HOST }}:993 (SSL)"
        echo "   SMTP: ${{ secrets.RHEL_HOST }}:587 (STARTTLS)"
        echo ""
        echo "üîß Development Management:"
        echo "   Monitor: ssh ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} 'podman ps'"
        echo "   Logs: ssh ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} 'podman logs investra-mailserver-dev'"
        echo "   Restart: ssh ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} 'podman restart investra-mailserver-dev'"
        echo ""
        echo "üìã Development Features:"
        echo "   ‚úÖ Self-signed SSL certificates"
        echo "   ‚úÖ Verbose logging enabled"
        echo "   ‚úÖ Simplified configuration for testing"
        echo ""
        echo "============================================"

    - name: Send deployment notification
      if: success()
      run: |
        echo "‚úÖ Development email server deployed successfully"
        echo "Server: ${{ secrets.RHEL_HOST }}"
        echo "Email: ${{ env.EMAIL_USER }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: Development"

    - name: Handle deployment failure
      if: failure()
      run: |
        echo "‚ùå Development email server deployment failed"
        echo "Check the logs above for error details"
        echo "Common development issues:"
        echo "- SSH connection to dev VM"
        echo "- Podman container startup"
        echo "- Port conflicts on dev VM"
        echo "- Missing development secrets"
