name: Deploy Email Server (Development)

on:
  push:
    branches: [ develop, development/*, feature/*, bugfix/*, hotfix/* ]
    paths:
      - 'email-server/**'
      - '.github/workflows/deploy-email-server-dev.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'email-server/**'
      - '.github/workflows/deploy-email-server-dev.yml'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'
        type: string
      vm_environment:
        description: 'VM Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - testing

env:
  EMAIL_DOMAIN: dev.investra.com
  EMAIL_HOSTNAME: mail-dev.investra.com
  EMAIL_USER: transactions-dev@investra.com

jobs:
  deploy-dev-email-server:
    name: Deploy Development Email Server
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch || github.ref }}

    - name: Display deployment info
      run: |
        echo "🚀 Development Email Server Deployment"
        echo "======================================"
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: development"
        echo "Email Domain: ${{ env.EMAIL_DOMAIN }}"
        echo "Email User: ${{ env.EMAIL_USER }}"
        echo "Target VM: Development VM"
        echo ""

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        # Try EMAIL_SERVER_SSH_KEY first, fallback to RHEL_SSH_KEY
        if [ -n "${{ secrets.EMAIL_SERVER_SSH_KEY }}" ]; then
          echo "${{ secrets.EMAIL_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        else
          echo "${{ secrets.RHEL_SSH_KEY }}" > ~/.ssh/id_rsa
        fi
        chmod 600 ~/.ssh/id_rsa
        # Test SSH key format
        ssh-keygen -l -f ~/.ssh/id_rsa || echo "SSH key format check completed"

    - name: Install Podman on Dev VM (if needed)
      run: |
        # Add host to known_hosts first
        ssh-keyscan -H ${{ secrets.RHEL_HOST }} >> ~/.ssh/known_hosts
        
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          # Check if Podman is installed
          if ! command -v podman &> /dev/null; then
            echo "Installing Podman on development VM..."
            
            # Update system
            sudo dnf update -y
            
            # Install Podman and related tools
            sudo dnf install -y podman podman compose podman-docker
            
            # Enable and start podman socket for docker compatibility
            systemctl --user enable podman.socket
            systemctl --user start podman.socket
            
            echo "Podman installation completed"
          else
            echo "Podman is already installed"
            podman --version
          fi
          
          # Enable lingering for user to allow user services to run without login
          sudo loginctl enable-linger $USER
          
          # Create podman alias for docker compatibility if needed
          if ! command -v docker &> /dev/null; then
            echo 'alias docker=podman' >> ~/.bashrc
            echo 'alias docker-compose="podman compose"' >> ~/.bashrc
          fi
          
          # Verify installation
          podman --version
          podman compose --version 2>/dev/null || echo "podman compose available"
        EOF

    - name: Configure development firewall
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          echo "Configuring development firewall..."
          
          # Configure firewall for email services (development ports)
          if sudo systemctl is-active --quiet firewalld; then
            echo "Configuring firewalld for development..."
            sudo firewall-cmd --permanent --add-port=25/tcp
            sudo firewall-cmd --permanent --add-port=587/tcp
            sudo firewall-cmd --permanent --add-port=993/tcp
            sudo firewall-cmd --permanent --add-port=8080/tcp  # Roundcube
            sudo firewall-cmd --permanent --add-port=8025/tcp  # Dev SMTP (optional)
            sudo firewall-cmd --reload
            echo "Development firewall configured"
          else
            echo "Firewalld not active, skipping firewall configuration"
          fi
          
          # Stop conflicting services
          for service in postfix sendmail; do
            if sudo systemctl is-active --quiet $service; then
              echo "Stopping $service..."
              sudo systemctl stop $service
              sudo systemctl disable $service
            fi
          done
        EOF

    - name: Create development email server directory
      run: |
        # Create directory on dev VM
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} "mkdir -p ~/investra-email-server-dev"
        
        # Copy email server files
        scp -i ~/.ssh/id_rsa -r email-server/* ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }}:~/investra-email-server-dev/

    - name: Configure development environment
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          cd ~/investra-email-server-dev
          
          # Create development environment file
          cat > .env << 'ENVEOF'
        # Development Email Server Configuration
        HOSTNAME=${{ env.EMAIL_HOSTNAME }}
        DOMAINNAME=${{ env.EMAIL_DOMAIN }}
        
        # Development Email Credentials
        MAILSERVER_USER=${{ env.EMAIL_USER }}
        MAILSERVER_PASS=${{ secrets.DEV_EMAIL_PASSWORD }}
        
        # IMAP Connection Details
        IMAP_HOST=${{ secrets.RHEL_HOST }}
        IMAP_PORT=993
        IMAP_TLS=true
        
        # Development SMTP Configuration  
        SMTP_HOST=${{ secrets.RHEL_HOST }}
        SMTP_PORT=587
        SMTP_TLS=true
        
        # Development settings (more verbose logging)
        DMS_DEBUG=1
        LOG_LEVEL=debug
        ENVEOF
          
          echo "Development environment file created"
        EOF

    - name: Update docker-compose for development
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          cd ~/investra-email-server-dev
          
          # Create development docker-compose.yml with simplified SSL
          cat > docker-compose.yml << 'COMPOSEEOF'
        version: '3.8'
        
        services:
          mailserver:
            image: ghcr.io/docker-mailserver/docker-mailserver:latest
            hostname: ${{ env.EMAIL_HOSTNAME }}
            domainname: ${{ env.EMAIL_DOMAIN }}
            ports:
              - "25:25"    # SMTP
              - "587:587"  # SMTP Submission
              - "993:993"  # IMAPS
              - "143:143"  # IMAP
            volumes:
              - ./docker-data/dms/mail-data/:/var/mail/
              - ./docker-data/dms/mail-state/:/var/mail-state/
              - ./docker-data/dms/mail-logs/:/var/log/mail/
              - ./docker-data/dms/config/:/tmp/docker-mailserver/
              - /etc/localtime:/etc/localtime:ro
            environment:
              # Basic Configuration
              - ENABLE_SPAMASSASSIN=1
              - ENABLE_CLAMAV=0
              - ENABLE_FAIL2BAN=1
              - ENABLE_POSTGREY=0
              - ENABLE_MANAGESIEVE=1
              
              # Development SSL (self-signed)
              - SSL_TYPE=self-signed
              - TLS_LEVEL=intermediate
              - ENABLE_SRS=0
              
              # Authentication
              - PERMIT_DOCKER=none
              - SPOOF_PROTECTION=1
              - ENABLE_SASLAUTHD=0
              
              # Postfix Configuration
              - POSTFIX_MAILBOX_SIZE_LIMIT=0
              - POSTFIX_MESSAGE_SIZE_LIMIT=100000000
              
              # Dovecot Configuration
              - DOVECOT_MAILBOX_FORMAT=maildir
              - DOVECOT_TLS=yes
              
              # Development settings (verbose logging)
              - LOG_LEVEL=debug
              - DMS_DEBUG=1
              
              # Custom Environment
              - OVERRIDE_HOSTNAME=${{ env.EMAIL_HOSTNAME }}
              
            restart: unless-stopped
            cap_add:
              - NET_ADMIN
              - SYS_PTRACE
            
            # Health check
            healthcheck:
              test: ["CMD", "ss", "-lnpt", "state", "listening"]
              interval: 30s
              timeout: 5s
              retries: 3
              start_period: 60s
        
          # Development email administration interface
          mailserver-admin:
            image: roundcube/roundcubemail:latest
            ports:
              - "8080:80"
            environment:
              - ROUNDCUBEMAIL_DEFAULT_HOST=tls://mailserver
              - ROUNDCUBEMAIL_DEFAULT_PORT=993
              - ROUNDCUBEMAIL_SMTP_SERVER=tls://mailserver
              - ROUNDCUBEMAIL_SMTP_PORT=587
              - ROUNDCUBEMAIL_DB_TYPE=sqlite
            depends_on:
              - mailserver
            restart: unless-stopped
            volumes:
              - ./docker-data/roundcube:/var/www/html
        
        networks:
          default:
            driver: bridge
        COMPOSEEOF
          
          echo "Development Docker Compose file created"
        EOF

    - name: Setup development email server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          cd ~/investra-email-server-dev
          
          # Make scripts executable
          chmod +x *.sh
          
          # Run setup script
          ./setup.sh
          
          # Update email account with development password
          echo "${{ env.EMAIL_USER }}|{PLAIN}${{ secrets.DEV_EMAIL_PASSWORD }}" > docker-data/dms/config/postfix-accounts.cf
          
          # Add development aliases
          cat > docker-data/dms/config/postfix-virtual.cf << 'VIRTUALEOF'
        # Development email aliases
        transactions-dev@investra.com transactions-dev@investra.com
        wealthsimple-dev@investra.com transactions-dev@investra.com
        test@investra.com transactions-dev@investra.com
        dev@investra.com transactions-dev@investra.com
        VIRTUALEOF
          
          echo "Development email server setup completed"
        EOF

    - name: Start development email server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          cd ~/investra-email-server-dev
          
          # Stop any existing instance
          podman compose down || true
          
          # Start development email server
          podman compose pull
          podman compose up -d
          
          echo "Development email server started"
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Check status
          podman ps --filter "name=investra"
        EOF

    - name: Test development email server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          cd ~/investra-email-server-dev
          
          echo "Testing development email server..."
          
          # Test ports
          for port in 25 587 993 8080; do
            if timeout 5 bash -c "</dev/tcp/localhost/$port" 2>/dev/null; then
              echo "✅ Port $port is open"
            else
              echo "❌ Port $port is not accessible"
            fi
          done
          
          # Check container health
          echo "Container status:"
          podman ps --filter "name=investra"
          
          # Check logs for errors
          echo "Checking for errors in logs..."
          podman logs investra-mailserver-dev --tail=20 | grep -i error || echo "No errors found"
          
          echo "Development email server testing completed"
        EOF

    - name: Create development monitoring script
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          cd ~/investra-email-server-dev
          
          # Create development monitoring script
          cat > monitor-dev-email.sh << 'MONITOREOF'
        #!/bin/bash
        # Development Email Server Monitoring
        
        echo "=== Development Email Server Status $(date) ==="
        
        # Container status
        echo "Podman Containers:"
        podman ps --filter "name=investra"
        
        # Port status
        echo -e "\nPort Status:"
        for port in 25 587 993 8080; do
          if timeout 2 bash -c "</dev/tcp/localhost/$port" 2>/dev/null; then
            echo "Port $port: ✅ Open"
          else
            echo "Port $port: ❌ Closed"
          fi
        done
        
        # Recent logs
        echo -e "\nRecent Logs:"
        podman logs investra-mailserver-dev --tail=10 2>/dev/null || echo "No logs available"
        
        # Mail queue
        echo -e "\nMail Queue:"
        podman exec investra-mailserver-dev postqueue -p 2>/dev/null || echo "Could not check mail queue"
        MONITOREOF
          
          chmod +x monitor-dev-email.sh
          
          echo "Development monitoring script created"
        EOF

    - name: Display development deployment summary
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          cd ~/investra-email-server-dev
          
          echo "============================================"
          echo "📧 DEVELOPMENT EMAIL SERVER DEPLOYED"
          echo "============================================"
          echo ""
          echo "🌐 Development Server Details:"
          echo "   Email Server: ${{ env.EMAIL_HOSTNAME }}"
          echo "   IP Address: ${{ secrets.RHEL_HOST }}"
          echo "   Email Account: ${{ env.EMAIL_USER }}"
          echo "   Environment: Development"
          echo ""
          echo "📧 Development Connection Settings:"
          echo "   IMAP: ${{ secrets.RHEL_HOST }}:993 (SSL)"
          echo "   SMTP: ${{ secrets.RHEL_HOST }}:587 (STARTTLS)"
          echo "   Web Interface: http://${{ secrets.RHEL_HOST }}:8080"
          echo ""
          echo "🔧 Development Management:"
          echo "   Monitor: ./monitor-dev-email.sh"
          echo "   Logs: podman logs investra-mailserver-dev -f"
          echo "   Restart: podman restart investra-mailserver-dev investra-roundcube-dev"
          echo "   Stop: podman stop investra-mailserver-dev investra-roundcube-dev"
          echo "   Start: podman start investra-mailserver-dev investra-roundcube-dev"
          echo ""
          echo "📋 Development Features:"
          echo "   ✅ Self-signed SSL certificates"
          echo "   ✅ Verbose logging enabled"
          echo "   ✅ Development aliases configured"
          echo "   ✅ Simplified security for testing"
          echo ""
          echo "⚠️  Development Notes:"
          echo "   - Uses self-signed certificates"
          echo "   - More verbose logging for debugging"
          echo "   - Simplified security settings"
          echo "   - Not intended for production use"
          echo ""
          echo "============================================"
        EOF

    - name: Send development deployment notification
      if: success()
      run: |
        echo "✅ Development email server deployed successfully"
        echo "Server: ${{ secrets.RHEL_HOST }}"
        echo "Email: ${{ env.EMAIL_USER }}"
        echo "Web Interface: http://${{ secrets.RHEL_HOST }}:8080"
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: Development"

    - name: Handle development deployment failure
      if: failure()
      run: |
        echo "❌ Development email server deployment failed"
        echo "Check the logs above for error details"
        echo "Common development issues:"
        echo "- SSH connection to dev VM"
        echo "- Docker installation or permissions"
        echo "- Port conflicts on dev VM"
        echo "- Missing development secrets"
        echo ""
        echo "Required secrets for development:"
        echo "- RHEL_HOST"
        echo "- RHEL_USER"
        echo "- DEV_VM_SSH_KEY"
        echo "- DEV_EMAIL_PASSWORD"
