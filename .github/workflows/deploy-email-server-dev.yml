name: Deploy Email Server (Development)

on:
  push:
    branches: [ develop, development/*, feature/*, bugfix/*, hotfix/* ]
    paths:
      - 'email-server/**'
      - '.github/workflows/deploy-email-server-dev.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'email-server/**'
      - '.github/workflows/deploy-email-server-dev.yml'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to deploy'
        required: false
        default: 'develop'
        type: string
      vm_environment:
        description: 'VM Environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - testing

env:
  EMAIL_DOMAIN: dev.investra.com
  EMAIL_HOSTNAME: mail-dev.investra.com
  EMAIL_USER: transactions-dev@investra.com

jobs:
  deploy-dev-email-server:
    name: Deploy Development Email Server
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch || github.ref }}

    - name: Display deployment info
      run: |
        echo "üöÄ Development Email Server Deployment"
        echo "======================================"
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: development"
        echo "Email Domain: ${{ env.EMAIL_DOMAIN }}"
        echo "Email User: ${{ env.EMAIL_USER }}"
        echo "Target VM: Development VM"

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        # Try EMAIL_SERVER_SSH_KEY first, fallback to RHEL_SSH_KEY
        if [ -n "${{ secrets.EMAIL_SERVER_SSH_KEY }}" ]; then
          echo "${{ secrets.EMAIL_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        else
          echo "${{ secrets.RHEL_SSH_KEY }}" > ~/.ssh/id_rsa
        fi
        chmod 600 ~/.ssh/id_rsa

    - name: Deploy email server to VM
      run: |
        # Add host to known_hosts
        ssh-keyscan -H ${{ secrets.RHEL_HOST }} >> ~/.ssh/known_hosts
        
        # Deploy email server using simple approach
        ssh -i ~/.ssh/id_rsa ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} << 'EOF'
          echo "Connected to VM successfully"
          
          # Verify Podman is available
          podman --version
          
          # Create email server directory
          mkdir -p ~/investra-email-server-dev
          cd ~/investra-email-server-dev
          
          # Stop any existing containers
          podman stop investra-mailserver-dev 2>/dev/null || true
          podman rm investra-mailserver-dev 2>/dev/null || true
          
          # Create necessary directories
          mkdir -p data/{mail-data,mail-state,mail-logs,config}
          
          # Pull the latest email server image
          podman pull ghcr.io/docker-mailserver/docker-mailserver:latest
          
          # Start a basic email server container
          podman run -d \
            --name investra-mailserver-dev \
            -p 25:25 \
            -p 587:587 \
            -p 993:993 \
            -p 143:143 \
            -v ./data/mail-data:/var/mail:Z \
            -v ./data/mail-state:/var/mail-state:Z \
            -v ./data/mail-logs:/var/log/mail:Z \
            -v ./data/config:/tmp/docker-mailserver:Z \
            -e SSL_TYPE=self-signed \
            -e LOG_LEVEL=debug \
            -e DMS_DEBUG=1 \
            ghcr.io/docker-mailserver/docker-mailserver:latest
          
          echo "Email server container started"
          
          # Wait for container to initialize
          sleep 20
          
          # Check container status
          podman ps --filter "name=investra-mailserver-dev"
          
          # Check if email ports are responding
          for port in 25 587 993; do
            if ss -tlnp | grep ":$port "; then
              echo "‚úÖ Port $port is listening"
            else
              echo "‚ùå Port $port is not listening"
            fi
          done
          
          echo "Development email server deployment completed"
        EOF

    - name: Display deployment summary
      run: |
        echo "============================================"
        echo "üìß DEVELOPMENT EMAIL SERVER DEPLOYED"
        echo "============================================"
        echo ""
        echo "üåê Development Server Details:"
        echo "   Email Server: ${{ env.EMAIL_HOSTNAME }}"
        echo "   IP Address: ${{ secrets.RHEL_HOST }}"
        echo "   Email Account: ${{ env.EMAIL_USER }}"
        echo "   Environment: Development"
        echo ""
        echo "üìß Development Connection Settings:"
        echo "   IMAP: ${{ secrets.RHEL_HOST }}:993 (SSL)"
        echo "   SMTP: ${{ secrets.RHEL_HOST }}:587 (STARTTLS)"
        echo ""
        echo "üîß Development Management:"
        echo "   Monitor: ssh ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} 'podman ps'"
        echo "   Logs: ssh ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} 'podman logs investra-mailserver-dev'"
        echo "   Restart: ssh ${{ secrets.RHEL_USER }}@${{ secrets.RHEL_HOST }} 'podman restart investra-mailserver-dev'"
        echo ""
        echo "üìã Development Features:"
        echo "   ‚úÖ Self-signed SSL certificates"
        echo "   ‚úÖ Verbose logging enabled"
        echo "   ‚úÖ Simplified configuration for testing"
        echo ""
        echo "============================================"

    - name: Send deployment notification
      if: success()
      run: |
        echo "‚úÖ Development email server deployed successfully"
        echo "Server: ${{ secrets.RHEL_HOST }}"
        echo "Email: ${{ env.EMAIL_USER }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Environment: Development"

    - name: Handle deployment failure
      if: failure()
      run: |
        echo "‚ùå Development email server deployment failed"
        echo "Check the logs above for error details"
        echo "Common development issues:"
        echo "- SSH connection to dev VM"
        echo "- Podman container startup"
        echo "- Port conflicts on dev VM"
        echo "- Missing development secrets"
