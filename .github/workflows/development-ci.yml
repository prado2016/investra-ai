name: Development CI

on:
  push:
    branches: [development, development/*, development/*/**]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows-archive-*/**'
  pull_request:
    branches: [development, development/*, development/*/**]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows-archive-*/**'

env:
  NODE_VERSION: '18'

jobs:
  code-quality:
    name: Code Quality & Type Checking
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js with caching
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Type checking
      run: npm run type-check

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:run

    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: coverage/
        retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: dist/
        retention-days: 7

  build-email-puller:
    name: Build Email Puller
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Check email-puller exists
      id: check-email-puller
      uses: andstor/file-existence-action@v3
      with:
        files: "email-puller"
        fail: false

    - name: Install email-puller dependencies
      if: steps.check-email-puller.outputs.files_exists == 'true'
      working-directory: email-puller
      run: npm ci

    - name: Build email-puller
      if: steps.check-email-puller.outputs.files_exists == 'true'
      working-directory: email-puller
      run: npm run build

    - name: Upload email-puller build
      if: steps.check-email-puller.outputs.files_exists == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: email-puller-build
        path: email-puller/dist/
        retention-days: 7

  development-summary:
    name: Development CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build-frontend, build-email-puller]
    if: always()
    
    steps:
    - name: Generate CI Summary
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'Code Quality': '${{ needs.code-quality.result }}',
            'Unit Tests': '${{ needs.unit-tests.result }}',
            'Frontend Build': '${{ needs.build-frontend.result }}',
            'Email Puller Build': '${{ needs.build-email-puller.result }}'
          };
          
          let summary = '## Development CI Results\n\n| Job | Status |\n| --- | --- |\n';
          for (const [job, status] of Object.entries(results)) {
            summary += `| ${job} | ${status} |\n`;
          }
          
          await core.summary.addRaw(summary).write();
          
          const criticalFailed = results['Code Quality'] !== 'success' || 
                                results['Unit Tests'] !== 'success' || 
                                results['Frontend Build'] !== 'success';
          
          if (criticalFailed) {
            core.setFailed('❌ Critical checks failed - review before merging');
          } else {
            core.info('✅ All development checks passed');
          }