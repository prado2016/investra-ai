name: Manual Production Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - hotfix
      deploy_frontend:
        description: 'Deploy frontend platform'
        required: false
        default: true
        type: boolean
      deploy_api:
        description: 'Deploy enhanced email API'
        required: false
        default: false
        type: boolean
      release_notes:
        description: 'Release notes or description'
        required: false
        default: 'Manual production release'
        type: string

env:
  NODE_VERSION: '18'
  FRONTEND_BUILD_DIR: dist
  FRONTEND_DEPLOY_DIR: /var/www/investra
  API_DEPLOY_DIR: /opt/investra/email-api-prod

jobs:
  pre-release-checks:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    
    outputs:
      can_deploy: ${{ steps.validation.outputs.can_deploy }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run validation checks
      id: validation
      run: |
        echo "üîç Running pre-release validation..."
        
        # Check if builds are successful
        FRONTEND_BUILD_SUCCESS=false
        API_BUILD_SUCCESS=false
        
        # Test frontend build
        if npm run build; then
          FRONTEND_BUILD_SUCCESS=true
          echo "‚úÖ Frontend build successful"
        else
          echo "‚ùå Frontend build failed"
        fi
        
        # Test API build
        if [ -d "server" ]; then
          cd server
          if npm ci && npm run build; then
            API_BUILD_SUCCESS=true
            echo "‚úÖ API build successful"
          else
            echo "‚ùå API build failed"
          fi
          cd ..
        fi
        
        # Determine if deployment can proceed
        CAN_DEPLOY=false
        if [[ "${{ github.event.inputs.deploy_frontend }}" == "true" && "$FRONTEND_BUILD_SUCCESS" == "true" ]]; then
          CAN_DEPLOY=true
        elif [[ "${{ github.event.inputs.deploy_api }}" == "true" && "$API_BUILD_SUCCESS" == "true" ]]; then
          CAN_DEPLOY=true
        elif [[ "${{ github.event.inputs.deploy_frontend }}" == "false" && "${{ github.event.inputs.deploy_api }}" == "false" ]]; then
          echo "‚ö†Ô∏è  No deployment targets selected"
        fi
        
        echo "can_deploy=$CAN_DEPLOY" >> $GITHUB_OUTPUT

    - name: Generate version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "1.0.0")
        RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        
        # Simple version bump logic
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case $RELEASE_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch"|"hotfix")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "üè∑Ô∏è  Version: $CURRENT_VERSION ‚Üí $NEW_VERSION"

  deploy-frontend:
    name: Deploy Frontend Platform
    runs-on: self-hosted
    needs: pre-release-checks
    if: needs.pre-release-checks.outputs.can_deploy == 'true' && github.event.inputs.deploy_frontend == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Backup current frontend
      run: |
        if [ -d "${{ env.FRONTEND_DEPLOY_DIR }}" ]; then
          BACKUP_DIR="${{ env.FRONTEND_DEPLOY_DIR }}.backup.$(date +%Y%m%d_%H%M%S)"
          cp -r "${{ env.FRONTEND_DEPLOY_DIR }}" "$BACKUP_DIR"
          echo "‚úÖ Frontend backup created: $BACKUP_DIR"
        fi

    - name: Deploy frontend
      run: |
        if [ -d "${{ env.FRONTEND_BUILD_DIR }}" ]; then
          rsync -av --delete "${{ env.FRONTEND_BUILD_DIR }}/" "${{ env.FRONTEND_DEPLOY_DIR }}/"
          echo "‚úÖ Frontend deployed to ${{ env.FRONTEND_DEPLOY_DIR }}"
        else
          echo "‚ùå Build directory not found"
          exit 1
        fi

    - name: Frontend health check
      run: |
        sleep 5
        if curl -f -s "http://localhost/" > /dev/null; then
          echo "‚úÖ Frontend health check passed"
        else
          echo "‚ö†Ô∏è  Frontend health check failed (may be expected)"
        fi

  deploy-enhanced-api:
    name: Deploy Enhanced Email API
    runs-on: self-hosted
    needs: pre-release-checks
    if: needs.pre-release-checks.outputs.can_deploy == 'true' && github.event.inputs.deploy_api == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Build enhanced API
      run: |
        cd server
        npm ci
        npm run build

    - name: Deploy enhanced API
      run: |
        cd server
        if [ -f "dist/standalone-enhanced-server-production.js" ]; then
          cp "dist/standalone-enhanced-server-production.js" "${{ env.API_DEPLOY_DIR }}/"
          chown investra:investra "${{ env.API_DEPLOY_DIR }}/standalone-enhanced-server-production.js"
          echo "‚úÖ Enhanced API deployed"
        else
          echo "‚ùå Enhanced API build not found"
          exit 1
        fi

    - name: Restart API service
      run: |
        cd "${{ env.API_DEPLOY_DIR }}"
        pm2 restart investra-email-api-prod || pm2 start standalone-enhanced-server-production.js --name investra-email-api-prod
        pm2 save
        echo "‚úÖ API service restarted"

    - name: API health check
      run: |
        sleep 10
        if curl -f -s "http://localhost:3001/health" > /dev/null; then
          echo "‚úÖ API health check passed"
        else
          echo "‚ùå API health check failed"
          pm2 logs investra-email-api-prod --lines 10
          exit 1
        fi

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [pre-release-checks, deploy-frontend, deploy-enhanced-api]
    if: always()
    
    steps:
    - name: Generate release summary
      run: |
        echo "üöÄ Production Release Summary"
        echo "============================"
        echo "Release Type: ${{ github.event.inputs.release_type }}"
        echo "Version: ${{ needs.pre-release-checks.outputs.version }}"
        echo "Release Notes: ${{ github.event.inputs.release_notes }}"
        echo ""
        echo "Deployment Status:"
        echo "Frontend: ${{ github.event.inputs.deploy_frontend == 'true' && 'üéØ Deployed' || '‚è≠Ô∏è Skipped' }} (${{ needs.deploy-frontend.result || 'not run' }})"
        echo "Enhanced API: ${{ github.event.inputs.deploy_api == 'true' && 'üéØ Deployed' || '‚è≠Ô∏è Skipped' }} (${{ needs.deploy-enhanced-api.result || 'not run' }})"
        echo ""
        echo "Pre-release Checks: ${{ needs.pre-release-checks.result }}"
        echo ""
        if [[ "${{ needs.pre-release-checks.result }}" == "success" ]]; then
          echo "‚úÖ Release completed successfully"
        else
          echo "‚ùå Release failed during validation"
        fi
        echo ""
        echo "Triggered by: ${{ github.actor }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
