name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Quick validation for PR
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run quick tests
        run: |
          # Run only unit tests for quick feedback
          npm run test:run -- --reporter=verbose
          
      - name: Check build
        run: npm run build
        
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            test
            chore
          requireScope: false
          
      - name: Check for large files
        run: |
          # Prevent accidentally committing large files
          find . -type f -size +5M -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "‚ùå Large file detected: $file"
            exit 1
          done || echo "‚úÖ No large files detected"
          
      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: .commitlintrc.json

  # Test coverage comparison
  coverage-comparison:
    name: Coverage Comparison
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate PR coverage
        run: |
          npm run test:coverage
          cp coverage/coverage-final.json coverage-pr.json
          
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          
      - name: Install dependencies (base)
        run: npm ci
        
      - name: Generate base coverage
        run: |
          npm run test:coverage || echo "Base coverage generation failed"
          cp coverage/coverage-final.json coverage-base.json || echo "{}" > coverage-base.json
          
      - name: Compare coverage
        run: |
          node -e "
            const fs = require('fs');
            
            let prCoverage, baseCoverage;
            try {
              prCoverage = JSON.parse(fs.readFileSync('coverage-pr.json', 'utf8')).total;
              baseCoverage = JSON.parse(fs.readFileSync('coverage-base.json', 'utf8')).total || {};
            } catch (error) {
              console.log('Error reading coverage files:', error.message);
              process.exit(0);
            }
            
            const metrics = ['statements', 'branches', 'functions', 'lines'];
            let report = '## üìà Coverage Comparison\n\n';
            report += '| Metric | Base | PR | Change |\n';
            report += '|--------|------|----|---------|\n';
            
            let improved = 0, degraded = 0;
            
            metrics.forEach(metric => {
              const prPct = prCoverage[metric]?.pct || 0;
              const basePct = baseCoverage[metric]?.pct || 0;
              const diff = prPct - basePct;
              const arrow = diff > 0 ? '‚¨ÜÔ∏è' : diff < 0 ? '‚¨áÔ∏è' : '‚û°Ô∏è';
              const sign = diff > 0 ? '+' : '';
              
              if (diff > 0) improved++;
              else if (diff < 0) degraded++;
              
              report += \`| \${metric} | \${basePct}% | \${prPct}% | \${arrow} \${sign}\${diff.toFixed(1)}% |\n\`;
            });
            
            if (improved > degraded) {
              report += '\n‚úÖ **Overall: Coverage improved!**';
            } else if (degraded > improved) {
              report += '\n‚ö†Ô∏è **Overall: Coverage decreased**';
            } else {
              report += '\n‚û°Ô∏è **Overall: Coverage unchanged**';
            }
            
            fs.writeFileSync('coverage-report.md', report);
            console.log(report);
          "
          
      - name: Comment coverage comparison
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const report = fs.readFileSync('coverage-report.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } catch (error) {
              console.log('Could not post coverage comparison:', error.message);
            }
