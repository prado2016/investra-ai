            {/* Success State - Side by Side */}
            {parsingStage === 'complete' && parsedData?.aiParsed && (
              <>
                <div style={{ 
                  background: '#dcfce7', 
                  border: '2px solid #16a34a', 
                  borderRadius: '8px', 
                  padding: '1rem', 
                  marginBottom: '1.5rem',
                  textAlign: 'center'
                }}>
                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '0.5rem' }}>
                    <span style={{ fontSize: '1.5rem' }}>üéâ</span>
                    <PanelTitle style={{ margin: 0, color: '#15803d' }}>
                      Transaction Successfully Extracted!
                    </PanelTitle>
                  </div>
                  {parsedData.confidence && (
                    <div style={{ fontSize: '0.875rem', color: '#15803d', marginTop: '0.5rem' }}>
                      Confidence: {Math.round(parsedData.confidence * 100)}%
                    </div>
                  )}
                </div>

                <SideBySideContainer>
                  <ExtractedDataPanel>
                    <PanelTitle>üìä AI Extracted Data</PanelTitle>
                    
                    {parsedData.symbol && (
                      <ExtractedField>
                        <FieldLabel>Symbol</FieldLabel>
                        <FieldValue>{parsedData.symbol}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.assetType && (
                      <ExtractedField>
                        <FieldLabel>Asset Type</FieldLabel>
                        <FieldValue>{parsedData.assetType}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.transactionType && (
                      <ExtractedField>
                        <FieldLabel>Transaction Type</FieldLabel>
                        <FieldValue>{parsedData.transactionType}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.portfolioName && (
                      <ExtractedField>
                        <FieldLabel>Portfolio</FieldLabel>
                        <FieldValue>{parsedData.portfolioName}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.quantity && (
                      <ExtractedField>
                        <FieldLabel>Quantity</FieldLabel>
                        <FieldValue>{parsedData.quantity} {parsedData.assetType === 'option' ? 'contracts' : 'shares'}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.price && (
                      <ExtractedField>
                        <FieldLabel>Price</FieldLabel>
                        <FieldValue>${parsedData.price}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.totalAmount && (
                      <ExtractedField>
                        <FieldLabel>Total Amount</FieldLabel>
                        <FieldValue>${parsedData.totalAmount}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.fees && (
                      <ExtractedField>
                        <FieldLabel>Fees</FieldLabel>
                        <FieldValue>${parsedData.fees}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.currency && (
                      <ExtractedField>
                        <FieldLabel>Currency</FieldLabel>
                        <FieldValue>{parsedData.currency}</FieldValue>
                      </ExtractedField>
                    )}
                    
                    {parsedData.transactionDate && (
                      <ExtractedField>
                        <FieldLabel>Date</FieldLabel>
                        <FieldValue>{parsedData.transactionDate}</FieldValue>
                      </ExtractedField>
                    )}
                  </ExtractedDataPanel>

                  <FormPanel>
                    <PanelTitle>‚úèÔ∏è Review & Edit</PanelTitle>
                    
                    <FormGroup>
                      <FormLabel>Portfolio *</FormLabel>
                      <FormSelect
                        value={transactionForm.portfolioId}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, portfolioId: e.target.value }))}
                      >
                        <option value="">Select Portfolio</option>
                        {portfolios.map(portfolio => (
                          <option key={portfolio.id} value={portfolio.id}>
                            {portfolio.name}
                          </option>
                        ))}
                      </FormSelect>
                    </FormGroup>

                    <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '1rem' }}>
                      <FormGroup>
                        <FormLabel>Symbol *</FormLabel>
                        <FormInput
                          type="text"
                          placeholder="e.g., AAPL"
                          value={transactionForm.symbol}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, symbol: e.target.value.toUpperCase() }))}
                        />
                      </FormGroup>

                      <FormGroup>
                        <FormLabel>Asset Type *</FormLabel>
                        <FormSelect
                          value={transactionForm.assetType}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, assetType: e.target.value as 'stock' | 'option' }))}
                        >
                          <option value="stock">Stock</option>
                          <option value="option">Option</option>
                        </FormSelect>
                      </FormGroup>
                    </div>

                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                      <FormGroup>
                        <FormLabel>Transaction Type *</FormLabel>
                        <FormSelect
                          value={transactionForm.transactionType}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, transactionType: e.target.value as 'buy' | 'sell' }))}
                        >
                          <option value="buy">Buy</option>
                          <option value="sell">Sell</option>
                        </FormSelect>
                      </FormGroup>

                      <FormGroup>
                        <FormLabel>Currency</FormLabel>
                        <FormSelect
                          value={transactionForm.currency}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, currency: e.target.value }))}
                        >
                          <option value="USD">USD</option>
                          <option value="CAD">CAD</option>
                          <option value="EUR">EUR</option>
                          <option value="GBP">GBP</option>
                        </FormSelect>
                      </FormGroup>
                    </div>

                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                      <FormGroup>
                        <FormLabel>
                          Quantity * {transactionForm.assetType === 'option' && '(contracts)'}
                        </FormLabel>
                        <FormInput
                          type="number"
                          step="0.01"
                          placeholder={transactionForm.assetType === 'option' ? '1' : '100'}
                          value={transactionForm.quantity}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, quantity: e.target.value }))}
                        />
                      </FormGroup>

                      <FormGroup>
                        <FormLabel>Price per {transactionForm.assetType === 'option' ? 'Contract' : 'Share'} *</FormLabel>
                        <FormInput
                          type="number"
                          step="0.01"
                          placeholder="0.00"
                          value={transactionForm.price}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, price: e.target.value }))}
                        />
                      </FormGroup>
                    </div>

                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                      <FormGroup>
                        <FormLabel>Total Amount</FormLabel>
                        <FormInput
                          type="number"
                          step="0.01"
                          placeholder="Auto-calculated"
                          value={transactionForm.totalAmount}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, totalAmount: e.target.value }))}
                        />
                      </FormGroup>

                      <FormGroup>
                        <FormLabel>Fees</FormLabel>
                        <FormInput
                          type="number"
                          step="0.01"
                          placeholder="0.00"
                          value={transactionForm.fees}
                          onChange={(e) => setTransactionForm(prev => ({ ...prev, fees: e.target.value }))}
                        />
                      </FormGroup>
                    </div>

                    <FormGroup>
                      <FormLabel>Date *</FormLabel>
                      <FormInput
                        type="date"
                        value={transactionForm.date}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, date: e.target.value }))}
                      />
                    </FormGroup>
                  </FormPanel>
                </SideBySideContainer>
              </>
            )}

            {/* Error State */}
            {parsingStage === 'error' && (
              <div style={{ 
                background: '#fee2e2', 
                border: '2px solid #ef4444', 
                borderRadius: '8px', 
                padding: '1.5rem', 
                marginBottom: '1.5rem',
                textAlign: 'center'
              }}>
                <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '0.5rem', marginBottom: '1rem' }}>
                  <span style={{ fontSize: '1.5rem' }}>‚ùå</span>
                  <PanelTitle style={{ margin: 0, color: '#991b1b' }}>
                    AI Parsing Failed
                  </PanelTitle>
                </div>
                
                {parsingError && (
                  <div style={{ 
                    fontSize: '0.875rem', 
                    color: '#7f1d1d', 
                    background: '#fef2f2', 
                    padding: '0.75rem',
                    borderRadius: '6px',
                    marginBottom: '1rem',
                    fontFamily: 'monospace',
                    textAlign: 'left'
                  }}>
                    <strong>Error:</strong> {parsingError}
                  </div>
                )}

                <FormPanel style={{ textAlign: 'left', marginTop: '1.5rem' }}>
                  <PanelTitle>‚úèÔ∏è Manual Entry Required</PanelTitle>
                  
                  <FormGroup>
                    <FormLabel>Portfolio *</FormLabel>
                    <FormSelect
                      value={transactionForm.portfolioId}
                      onChange={(e) => setTransactionForm(prev => ({ ...prev, portfolioId: e.target.value }))}
                    >
                      <option value="">Select Portfolio</option>
                      {portfolios.map(portfolio => (
                        <option key={portfolio.id} value={portfolio.id}>
                          {portfolio.name}
                        </option>
                      ))}
                    </FormSelect>
                  </FormGroup>

                  <div style={{ display: 'grid', gridTemplateColumns: '2fr 1fr', gap: '1rem' }}>
                    <FormGroup>
                      <FormLabel>Symbol *</FormLabel>
                      <FormInput
                        type="text"
                        placeholder="e.g., AAPL"
                        value={transactionForm.symbol}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, symbol: e.target.value.toUpperCase() }))}
                      />
                    </FormGroup>

                    <FormGroup>
                      <FormLabel>Asset Type *</FormLabel>
                      <FormSelect
                        value={transactionForm.assetType}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, assetType: e.target.value as 'stock' | 'option' }))}
                      >
                        <option value="stock">Stock</option>
                        <option value="option">Option</option>
                      </FormSelect>
                    </FormGroup>
                  </div>

                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                    <FormGroup>
                      <FormLabel>Transaction Type *</FormLabel>
                      <FormSelect
                        value={transactionForm.transactionType}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, transactionType: e.target.value as 'buy' | 'sell' }))}
                      >
                        <option value="buy">Buy</option>
                        <option value="sell">Sell</option>
                      </FormSelect>
                    </FormGroup>

                    <FormGroup>
                      <FormLabel>Currency</FormLabel>
                      <FormSelect
                        value={transactionForm.currency}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, currency: e.target.value }))}
                      >
                        <option value="USD">USD</option>
                        <option value="CAD">CAD</option>
                        <option value="EUR">EUR</option>
                        <option value="GBP">GBP</option>
                      </FormSelect>
                    </FormGroup>
                  </div>

                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                    <FormGroup>
                      <FormLabel>
                        Quantity * {transactionForm.assetType === 'option' && '(contracts)'}
                      </FormLabel>
                      <FormInput
                        type="number"
                        step="0.01"
                        placeholder={transactionForm.assetType === 'option' ? '1' : '100'}
                        value={transactionForm.quantity}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, quantity: e.target.value }))}
                      />
                    </FormGroup>

                    <FormGroup>
                      <FormLabel>Price per {transactionForm.assetType === 'option' ? 'Contract' : 'Share'} *</FormLabel>
                      <FormInput
                        type="number"
                        step="0.01"
                        placeholder="0.00"
                        value={transactionForm.price}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, price: e.target.value }))}
                      />
                    </FormGroup>
                  </div>

                  <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                    <FormGroup>
                      <FormLabel>Total Amount</FormLabel>
                      <FormInput
                        type="number"
                        step="0.01"
                        placeholder="Auto-calculated"
                        value={transactionForm.totalAmount}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, totalAmount: e.target.value }))}
                      />
                    </FormGroup>

                    <FormGroup>
                      <FormLabel>Fees</FormLabel>
                      <FormInput
                        type="number"
                        step="0.01"
                        placeholder="0.00"
                        value={transactionForm.fees}
                        onChange={(e) => setTransactionForm(prev => ({ ...prev, fees: e.target.value }))}
                      />
                    </FormGroup>
                  </div>

                  <FormGroup>
                    <FormLabel>Date *</FormLabel>
                    <FormInput
                      type="date"
                      value={transactionForm.date}
                      onChange={(e) => setTransactionForm(prev => ({ ...prev, date: e.target.value }))}
                    />
                  </FormGroup>
                </FormPanel>
              </div>
            )}

            {/* Action Buttons */}
            {(parsingStage === 'complete' || parsingStage === 'error') && (
              <FormActions>
                <Button
                  variant="outline"
                  onClick={() => setProcessingEmail(null)}
                >
                  Cancel
                </Button>
                <Button
                  variant="primary"
                  onClick={handleProcessEmail}
                >
                  <DollarSign size={16} />
                  Create Transaction & Archive Email
                </Button>
              </FormActions>
            )}